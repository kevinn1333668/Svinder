import random

from aiogram import F
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from src.config import settings
from src.service.db_service import ServiceDB
from src.states import SearchProfileStates, UserRoadmap, CreateProfileStates, EditProfileStates




from src.keyboards.reply import (
    go_to_main_menu, 
    main_menu_keyboard, yes_or_no_keyboard,
    understand_keyboard, welcome_keyboard,
)
from src.keyboards.inline import get_confirmation_keyboard 

from src.static.text.texts import (
    text_main_menu, text_main_menu_get_back,
    text_search_profiles, text_edit_profile,
    text_my_profile, 
    text_no, text_yes,
    text_profile_create_begin,
    text_search_profiles_start,
    text_delete_profile, text_filter_sex,
    text_top_likers
)


user_router = Router()


@user_router.message(F.text == text_my_profile)
async def get_my_profile(message: Message):
    profile = await ServiceDB.get_profile_by_tgid(message.from_user.id)

    profile_image = profile.s3_path

    await message.answer_photo(
            photo=profile_image,
            caption=(
                f"{profile.name}, {profile.age} –ª–µ—Ç, {profile.uni}\n"
                f"{profile.sex.value}\n"
                f"{profile.description}"
            )
        )
    
@user_router.message(F.text == text_filter_sex)
async def toggle_gender_filter(message: Message):
    result = await ServiceDB.change_gender_filter(message.from_user.id)

    if result:
        filter_id = result[1]
        if filter_id == 0:
            await message.answer(f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå')

        elif filter_id == 1:
            await message.answer(f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –î–µ–≤–æ—á–∫–∏ üëß')

        elif filter_id == 2:
            await message.answer(f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ú–∞–ª—å—á–∏–∫–∏ üë¶')

    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")


@user_router.message(F.text == text_top_likers)
async def get_top_likers(message: Message):
    top_users = await ServiceDB.get_top_10()

    text = "üèÜ –¢–û–ü-10 –ø–æ –ª–∞–π–∫–∞–º:\n\n"
    for i, (name, count) in enumerate(top_users, 1):
        if i == 1:
            text += f"ü•á {name} ‚Äî {count}  ‚ù§Ô∏è\n"

        elif i == 2:
            text += f"ü•à {name} ‚Äî {count}  ‚ù§Ô∏è\n"

        elif i == 3:
            text += f"ü•â {name} ‚Äî {count}  ‚ù§Ô∏è\n"

        else:
            text += f"{i}. {name} ‚Äî {count}  ‚ù§Ô∏è\n"

    await message.answer(text)


@user_router.message(F.text == text_delete_profile)
async def delete_my_profile(message: Message):
    await message.answer(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirmation_keyboard()
    )


@user_router.callback_query(F.data == "confirm_delete_profile")
async def confirm_delete_profile(callback: CallbackQuery):
    user_tg_id = callback.from_user.id

    try:
        await ServiceDB.delete_profile(tg_id=user_tg_id)
        await callback.message.edit_text(text="–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ '/start' –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    except Exception as e:
        await callback.message.edit_text(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è!")

    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏


@user_router.callback_query(F.data == "cancel_delete_profile")
async def cancel_delete_profile(callback: CallbackQuery):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏


@user_router.message(F.text == text_edit_profile)
async def user_start_edit_profile(message: Message, state: FSMContext):
    await message.answer(
        "–ù—É —á—Ç–æ –∂–µ, –¥–∞–≤–∞–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É",
        reply_markup=welcome_keyboard(),
    )
    await state.set_state(EditProfileStates.start)



@user_router.message(UserRoadmap.main_menu, F.text == text_yes)
async def user_create_profile(message: Message, state: FSMContext):
    await message.answer(
        text_profile_create_begin,
        reply_markup=understand_keyboard(),
    )
    await state.set_state(CreateProfileStates.start)


@user_router.message(UserRoadmap.main_menu)
async def user_search_profiles(message: Message, state: FSMContext):
    if await ServiceDB.is_profile_exist_by_tgid(message.from_user.id):
        await message.answer(
            text_main_menu,
            reply_markup=main_menu_keyboard(),
        )
        await state.set_state(SearchProfileStates.start)
    else:
        await message.answer(
            "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
            reply_markup=yes_or_no_keyboard()
        )








@user_router.message(UserRoadmap.main_menu)
async def user_main_menu(message: Message, state: FSMContext):
    await message.answer(
        text_main_menu,
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown",
    )
