from aiogram import Router, Bot, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery 
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from src.service.db_service import ServiceDB
from src.keyboards.reply import main_menu_keyboard
from src.keyboards.inline import profile_action_keyboard, confirm_keyboard, moderation_keyboard
from src.states import SearchProfileStates, UserRoadmap
from src.static.text.texts import text_search_profiles
from src.service.schemas import LikeSchema, ProfileSchema
from typing import List, Optional
from src.handlers.likes import get_telegram_username_or_name

from src.config import settings


search_router = Router()

# –í –ë–£–î–£–©–ï–ú:
# –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ @username
# telegram_info = await get_telegram_username_or_name(bot, profile.tg_id)
# f"\nTelegram: {telegram_info}"


async def send_next_profile(target_message: Message, curr_user_tgid: int, state: FSMContext, bot: Bot):
    profile = await ServiceDB.search_profile(curr_user_tgid)

    if profile:
        try:
            file_id = profile.s3_path

            await state.update_data(current_viewing_tg_id=profile.tg_id, profile_image=file_id)

            await target_message.answer_photo(
                photo=file_id,
                caption=(
                    f"{profile.name}, {profile.age} –ª–µ—Ç, {profile.uni}\n"
                    f"{profile.description}"
                ),
                reply_markup=profile_action_keyboard()
            )
            
            await state.set_state(SearchProfileStates.viewing_profile)

        except FileNotFoundError:
             await target_message.answer(f"–û—à–∏–±–∫–∞: –§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {profile.s3_path}. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.")
             await send_next_profile(target_message, curr_user_tgid, state, bot) 
        except Exception as e:
             await target_message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.")
             print(f"Error sending photo: {e}")
             await send_next_profile(target_message, curr_user_tgid, state, bot)


    else:
        await target_message.answer(
            "–î—Ä—É–≥–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò≠",
            reply_markup=main_menu_keyboard()
        )
        await state.set_state(UserRoadmap.main_menu)


@search_router.message(F.text == text_search_profiles)
async def initiate_profile_search_handler(message: Message, state: FSMContext, bot: Bot): # –ù—É–∂–µ–Ω bot: Bot
     await state.clear() 
     user_profile = await ServiceDB.get_profile_by_tgid(message.from_user.id)
     if user_profile is None:
         await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É (/start).")
         return
     await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç...", reply_markup=ReplyKeyboardRemove())
     await send_next_profile(message, message.from_user.id, state, bot)


@search_router.callback_query(SearchProfileStates.viewing_profile, F.data.in_(["like", "next", "main_menu", "complain"]))
async def handle_profile_action(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    await callback_query.answer()

    action = callback_query.data
    user_tg_id = callback_query.from_user.id
    state_data = await state.get_data()
    viewed_tg_id = state_data.get("current_viewing_tg_id")

    print(f"DEBUG: handle_profile_action –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º TG ID: {user_tg_id}")
    print(f"DEBUG: –ò–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω viewed_tg_id: {viewed_tg_id}")

    if not viewed_tg_id:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    print(f"User {user_tg_id} pressed '{action}' on profile TG ID {viewed_tg_id}")

    if action == "like":
        print(f"–õ–∞–π–∫! {user_tg_id} -> {viewed_tg_id}")

        await ServiceDB.like_profile(user_tg_id, viewed_tg_id)
        await callback_query.message.answer("üëç")

        pending_likes: List[LikeSchema] = await ServiceDB.get_pending_likes(liked_tgid=user_tg_id)
        liker_ids = [like.liker_tgid for like in pending_likes]

        if viewed_tg_id in liker_ids:
            await ServiceDB.accept_like(viewed_tg_id, user_tg_id)
            await ServiceDB.accept_like(user_tg_id, viewed_tg_id)
            profile_data_viewed: Optional[ProfileSchema] = await ServiceDB.get_profile_by_tgid(viewed_tg_id)
            profile_data_user: Optional[ProfileSchema] = await ServiceDB.get_profile_by_tgid(user_tg_id)

            if profile_data_viewed:
                try:
                    profile_viewed_image = profile_data_viewed.s3_path
                    profile_user_image = profile_data_user.s3_path

                    telegram_viewed_info = await get_telegram_username_or_name(bot, viewed_tg_id)
                    telegram_user_info = await get_telegram_username_or_name(bot, user_tg_id)
                    
                    await callback_query.message.answer_photo(
                        photo=profile_viewed_image,
                        caption=(
                            f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å: {profile_data_viewed.name}, {profile_data_viewed.age}\n"
                            f"–ì–æ—Ä–æ–¥: {profile_data_viewed.uni}\n"
                            f"–û —Å–µ–±–µ: {profile_data_viewed.description}\n\n"
                            f"–°–≤—è–∑—å: {telegram_viewed_info}"
                        )
                    )

                    await bot.send_photo(
                        chat_id=viewed_tg_id,
                        photo=profile_user_image,
                        caption=(
                            f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å: {profile_data_user.name}, {profile_data_user.age}\n"
                            f"–ì–æ—Ä–æ–¥: {profile_data_user.uni}\n"
                            f"–û —Å–µ–±–µ: {profile_data_user.description}\n\n"
                            f"–°–≤—è–∑—å: {telegram_user_info}"
                        )
                    )

                except FileNotFoundError:
                    await callback_query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_data_viewed.name} (ID: {viewed_tg_id}). Telegram: {await get_telegram_username_or_name(bot, viewed_tg_id)}")
                except Exception as e:
                    await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è {profile_data_viewed.name} (ID: {viewed_tg_id}). Telegram: {await get_telegram_username_or_name(bot, viewed_tg_id)}. –û—à–∏–±–∫–∞: {e}")
                    print(f"Error sending mutual like profile: {e}")
            else:
                await callback_query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {viewed_tg_id}. Telegram: {await get_telegram_username_or_name(bot, viewed_tg_id)}")
        await send_next_profile(callback_query.message, user_tg_id, state, bot)

    elif action == "next":
        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {user_tg_id} -> {viewed_tg_id}")

        await ServiceDB.create_dislike(user_id=user_tg_id, target_id=viewed_tg_id)

        await send_next_profile(callback_query.message, user_tg_id, state, bot)

    elif action == 'complain':
        await state.update_data(
            previous_message_text=callback_query.message.caption,
            previous_keyboard=callback_query.message.reply_markup
        )

        try:
            await callback_query.message.edit_caption(
                caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
                reply_markup=confirm_keyboard()
            )
            return

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    elif action == "main_menu":
        await callback_query.message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        await state.set_state(UserRoadmap.main_menu)

    try:
         await callback_query.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest as e:
         print(f"Telegram API error editing/deleting message: {e}")
    except Exception as e:
         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@search_router.callback_query(F.data.in_(["complain_confirm", "complain_cancel"]))
async def handle_complain_confirmation(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    await callback_query.answer()

    action = callback_query.data
    state_data = await state.get_data()
    viewed_tg_id = state_data.get("current_viewing_tg_id")
    profile_photo = state_data.get("profile_image")
    previous_message_text = state_data.get("previous_message_text", "")
    previous_keyboard = state_data.get("previous_keyboard", None)

    if action == "complain_confirm":
        user_tg_id = callback_query.from_user.id
        
        await ServiceDB.report_profile(user_id=user_tg_id, target_id=viewed_tg_id)

        await bot.send_photo(
            chat_id=settings.ADMIN_CHAT_ID,
            photo=profile_photo,
            caption=previous_message_text,
            reply_markup=moderation_keyboard(viewed_tg_id)
        )

        await callback_query.message.answer("üëç")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ {viewed_tg_id}")



        await send_next_profile(callback_query.message, user_tg_id, state, bot)

    elif action == "complain_cancel":
        try:
            await callback_query.message.edit_caption(
                caption=previous_message_text,
                reply_markup=previous_keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.")

        await state.update_data(
            previous_message_text=None,
            previous_keyboard=None
        )

