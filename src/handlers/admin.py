from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery 
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.filters.command import CommandObject

from src.service.db_service import ServiceDB
from src.keyboards.inline import moderation_keyboard
from src.states import SearchProfileStates, UserRoadmap
from src.static.text.texts import text_search_profiles
from src.handlers.likes import get_telegram_username_or_name
from src.states import AdminStates

from src.config import settings
import asyncio

admin_router = Router()

broadcast_mode = False

@admin_router.callback_query(F.data.startswith("approve_"))
async def handle_approve(callback_query: CallbackQuery, bot: Bot):
    await callback_query.answer()

    user_tg_id = int(callback_query.data.split("_")[1])
    admin = callback_query.from_user

    username = await get_telegram_username_or_name(bot, user_tg_id)

    admin_mention = f"@{admin.username}" if admin.username else admin.full_name
    user_mention = f"@{username}" if username.startswith('@') else username
    print('123')

    new_text = f"‚úÖ –ê–¥–º–∏–Ω {admin_mention} –æ–¥–æ–±—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}"

    try:
        await callback_query.message.delete()
        await callback_query.message.answer(new_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.message.answer(new_text)

    print(f"–ê–¥–º–∏–Ω {admin.id} –æ–¥–æ–±—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")

@admin_router.callback_query(F.data.startswith("ban_"))
async def handle_ban(callback_query: CallbackQuery, bot: Bot):

    await callback_query.answer()

    action = callback_query.data
    user_tg_id = int(action.split('_')[1])

    if user_tg_id in settings.ADMINS_IDS:
        await callback_query.message.delete()
        await callback_query.message.answer("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    is_banned = await ServiceDB.is_user_banned(tg_id=user_tg_id)
    print(is_banned)
    if is_banned:
        await callback_query.message.answer(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")
        return




    await ServiceDB.ban_profile(tg_id=user_tg_id)

    ban = await ServiceDB.get_ban_by_tg_id_ORM(tg_id=user_tg_id)
    
    admin = callback_query.from_user

    username = await get_telegram_username_or_name(bot, user_tg_id)

    admin_mention = f"@{admin.username}" if admin.username else admin.full_name
    user_mention = f"{username}" if username.startswith('@') else username

    new_text = f"‚ùå –ê–¥–º–∏–Ω {admin_mention} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}. ID –±–∞–Ω–∞ - {ban.ban_id}"

    try:
        await bot.send_message(
        chat_id=user_tg_id,
        text=f"–í—ã –∑–∞–±–∞–Ω–µ–Ω–Ω—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. ID –±–∞–Ω–∞ {ban.ban_id}\n –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - @SvinderSupportBot"
    )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        await callback_query.message.delete()
        await callback_query.message.answer(new_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.message.answer(new_text)

    print(f"–ê–¥–º–∏–Ω {admin.id} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")

@admin_router.message(Command("ban"))
async def cmd_ban(message: Message, command: CommandObject):

    if message.from_user.id not in settings.ADMINS_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
    

    

    args = command.args

    if args == '@PaiN7111':
        await message.answer("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ban @username`", parse_mode="Markdown")
        return
    
    username = args.strip().lstrip('@')
    user = await ServiceDB.get_user_by_usernameORM(username)

    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    success = await ServiceDB.ban_profile(tg_id=user.tg_id)
    if success:

        ban_id = await ServiceDB.get_ban_id(tg_id=user.tg_id)

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω. ID –±–∞–Ω–∞ - {ban_id}")
        try:
            await message.bot.send_message(user.tg_id, f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. ID –±–∞–Ω–∞ - {ban_id}\n –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ @SvinderSupportBot")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ.")

@admin_router.message(Command("unban"))
async def cmd_unban(message: Message, command: CommandObject):
    
    if message.from_user.id not in settings.ADMINS_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
    
    args = command.args

    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unban ID`", parse_mode="Markdown")
        
    try:    
        ban_id = int(args)

    except:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–æ–º")
        return
    
    ban = await ServiceDB.get_ban_by_ban_id_ORM(ban_id=ban_id)
    success = await ServiceDB.unban_profile(ban_id=ban_id)

    if success:


        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        try:
            await message.bot.send_message(ban.tg_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.")


@admin_router.message(Command('broadcast'))
async def start_broadcast(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    if message.from_user.id not in settings.ADMINS_IDS:
        return  # –ò–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "–Ω–µ—Ç –ø—Ä–∞–≤", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AdminStates.waiting_broadcast)
    await message.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@admin_router.message(Command('adv'))
async def start_broadcast(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    if message.from_user.id not in settings.ADMINS_IDS:
        return  # –ò–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "–Ω–µ—Ç –ø—Ä–∞–≤", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AdminStates.waitng_advertisment)
    await message.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@admin_router.message(AdminStates.waiting_broadcast, F.from_user.id.in_(settings.ADMINS_IDS))
async def handle_broadcast(message: Message, bot: Bot, state: FSMContext):
    
    
    await state.clear()
    
    tg_ids = await ServiceDB.get_all_users()

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({len(tg_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)")

    for tg_id in tg_ids:
        try:
            if message.text:
                await bot.send_message(
                    chat_id=tg_id,
                    text=message.text
                )

            else:
                await bot.copy_message(
                    chat_id=tg_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id,
                    caption=message.caption or ''
                )
            await asyncio.sleep(0.05) 

        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ {tg_id}: {e}')

    await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


@admin_router.message(AdminStates.waitng_advertisment, F.from_user.id.in_(settings.ADMINS_IDS))
async def handle_broadcast(message: Message, bot: Bot, state: FSMContext):
    
    
    await state.clear()
    
    tg_ids = await ServiceDB.get_all_users()

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({len(tg_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)")

    for tg_id in tg_ids:
        try:
            if message.text:
                await bot.send_message(
                    chat_id=tg_id,
                    text=message.text + '\n\n#—Ä–µ–∫–ª–∞–º–∞'
                )

            else:
                await bot.copy_message(
                    chat_id=tg_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id,
                    caption=(message.caption or '') + '\n\n#—Ä–µ–∫–ª–∞–º–∞'
                 )
            await asyncio.sleep(0.05) 

        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ {tg_id}: {e}')

    await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')